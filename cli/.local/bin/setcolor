#!/usr/bin/env bash

CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
DEFAULT_COLOR='catppuccin'
DEFAULT_BG='dark'

has() {
	command -v "$1" >/dev/null 2>&1
}

# Convert a color name to capital style
# gruvbox-material -> Gruvbox Material
get-cap-theme-name() {
	# $1: name of the fish theme
	if ! has awk || ! has sed; then
		return 1
	fi
	local theme_name=$(echo "$1" |
		sed 's/-/ /g' |
		awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')
	echo "$theme_name"
}

setcolor-alacritty() {
	# $1: name of the colorscheme
	local themes_path="$CONFIG_HOME/alacritty/themes"
	local dark_theme_path="$themes_path/dark.toml"
	local light_theme_path="$themes_path/light.toml"
	# If $1 is empty, only need to ensure symlink to color theme files exists
	if [[ -z "$1" ]]; then
		ensure-slink "$themes_path/$DEFAULT_COLOR-dark.toml" "$dark_theme_path"
		ensure-slink "$themes_path/$DEFAULT_COLOR-light.toml" "$light_theme_path"
	else
		force-slink "$themes_path/$1-dark.toml" "$dark_theme_path"
		force-slink "$themes_path/$1-light.toml" "$light_theme_path"
	fi
	local config="$CONFIG_HOME/alacritty/alacritty.toml"
	[[ -e "$config" ]] && touch "$config" # Reload config
}

setcolor-nvim() {
	# $1: name of the colorscheme
	if [[ -z "$1" ]] || ! has nvim; then
		return 1
	fi
	local runtime_dir="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
	local appname="${NVIM_APPNAME:-nvim}"
	for sock in "$runtime_dir"/"$appname".*.0; do
		nvim --clean --headless --server "$sock" \
			--remote-send "<Cmd>if get(g:, 'colors_name', '') !=# '$1' | \
                let g:script_set_colors=1 | silent! colors $1 | \
                unlet g:script_set_colors | endif<CR>" +'qa!' 2>/dev/null
	done
	if has jq; then
		local colors_json="$STATE_HOME/nvim/colors.json"
		if [[ ! -e "$colors_json" ]]; then
			touch "$colors_json"
		fi
		local colors_name=$(jq -r '.colors_name' "$colors_json")
		if [[ "$colors_name" != "$1" ]]; then
			jq --arg colors_name "$1" '.colors_name = $colors_name' \
				"$colors_json" >"$colors_json.tmp"
			mv "$colors_json.tmp" "$colors_json"
		fi
	fi
}

# setcolor-fish() {
# 	# $1: name of the colorscheme
# 	local themes_path="$CONFIG_HOME/fish/themes"
# 	local dark_theme_path="$themes_path/Dark.theme"
# 	local light_theme_path="$themes_path/Light.theme"
# 	local default_theme_name=$(get-cap-theme-name "$DEFAULT_COLOR")
# 	if [[ -z "$1" ]]; then
# 		ensure-slink "$themes_path/${default_theme_name} Dark.theme" \
# 			"$dark_theme_path"
# 		ensure-slink "$themes_path/${default_theme_name} Light.theme" \
# 			"$light_theme_path"
# 	else
# 		local theme_name=$(get-cap-theme-name "$1")
# 		force-slink "$themes_path/${theme_name} Dark.theme" "$dark_theme_path"
# 		force-slink "$themes_path/${theme_name} Light.theme" "$light_theme_path"
# 	fi
# 	has fish &&
# 		fish -c 'set -U __fish_reload_theme "$(head -c 16 /dev/urandom | base32)"'
# }

usage() {
	echo 'Usage: setcolor [<colorscheme>]'
	exit 1
}

main() {
	local color=''
	for arg in "$@"; do
		case "$arg" in
		-h | --help)
			usage
			;;
		*)
			color="$arg"
			shift
			;;
		esac
	done
	niri msg action do-screen-transition
	setcolor-alacritty "$color" &
	setcolor-nvim "$color" &
	# setcolor-fish "$color" &
	return 0
}

main "$@"
